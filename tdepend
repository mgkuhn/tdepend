#!/usr/bin/perl
#List *.tex and *.m files on the command line to get Makefile dependencies

use strict;

unless (@ARGV) {
    print STDERR <<'EOT';
Scans the LaTeX (*.tex) and MATLAB (*.m) files provided as command-line
arguments for dependencies (files that they include), and writes the
result out in form rules suitable for inclusion into a Makefile.

Usage: tdepend [options] file file ...

Options:

  -p           Assume that pdflatex is used, i.e. that file *.tex produces
               a target *.pdf (the default assumes a target *.dvi) and
	       that \includegraphics will add a default suffix of .pdf.

  -s<suffix>   Add additional suffixes to the default LaTeX target list.

               Example: if you use your exam.tex source file to produce
               both exam.pdf and exam-solutions.pdf files, use
               "tdepend -p -s-solutions.pdf exam.tex >Makefile.include".

  -d<prefix>   Prefix in the output each target and dependency with this
               directory name. (This can useful if tdepend actually
               runs in a subdirectory of where the Makefile is
               located.)

EOT
    exit 1;
}

my @tex_target_suffix = ('.dvi');
my $includegraphics_suffix = '.eps';
my $prefix = '';

# remove duplicates from array
sub uniq {
    my %seen;
    grep !$seen{$_}++, @_;
}

# search file according to TEXINPUTS, etc.
sub kpsewhich {
    for $_ (@_) {
        if (! -e $_) {
            die if /'/;
            $_ = `kpsewhich '$_'` // $_;
            chomp;
            # skip dependencies on TeXLive distribution
            undef $_ if m:^/usr/share/:;
        }
    }
}

sub scan_texfile {
    my ($fn, $src) = @_;
    my $f;
    my @dep = ();
    my $path = $fn;
    kpsewhich($path);
    return unless defined $path;
    open($f, '<', $path) or die("tdepend: '$path' listed in $src: $!\n");
    while (<$f>) {
	s/(?<!\\)%.*$//;  # remove comments
	last if /^\s*\\end\{document\}/;
	if (/^(.*?)\\begin\{verbatim\}(.*)$/) {
	    # skip verbatim blocks
	    my $prelude = $1;
	    $_ = $2;
	    if (!s/^.*\\end\{verbatim\}//) {
		while (defined($_ = <$f>) && !s/^.*\\end\{verbatim\}//) {}
	    }
	    $_ = $prelude . $_;
	}
	while (s/\\includegraphics\*?(?:<.*?>)?(?:\[.*?\]){0,2}\{([\w\.\/-]+)\}//) {
	    my $path = $1;
	    $path .= $includegraphics_suffix
		unless $path =~ /\.[a-zA-Z_]+$/;
	    push @dep, $path;
	}
	while (s/\\includepdf(?:\[[^\]]*\]){0,2}\{([\w\.\/-]+)\}//) {
	    my $path = $1;
	    $path .= '.pdf'
		unless $path =~ /\.[a-zA-Z_]+$/;
	    push @dep, $path;
	}
	while (s/\\e?psfig\{(?:file|figure)=([\w\.\/-]+)(?:,[^,\}]*)*\}//) {
	    my $path = $1;
	    push @dep, $path;
	}
        while (s/\\usetheme\*?(?:\[\S+\]){0,2}\{([\w\.,\/-]+)\}/join('',
               map({"\\usepackage\{beamertheme$_.sty\}"} split(',', $1)))/e) {}
	while (s/\\((?:verbatim)?input|usepackage|documentclass|lstinputlisting)\*?(?:\[\S+\]){0,2}\{([\w\.\/-]+)\}// ||
               s/\\(input)\s+([\w\.\/-]+)//) {
            my $macro = $1;
	    my $path = $2;
            unless ($path =~ /\.\w{1,8}$/i) {
                if ($macro eq 'input') {
                    $path .= '.tex';
                } elsif ($macro eq 'usepackage') {
                    $path .= '.sty';
                } elsif ($macro eq 'documentclass') {
                    $path .= '.cls';
                }
            }
            kpsewhich($path);
            next unless defined $path;
	    push @dep, $path;
	    # recurse
	    push @dep, scan_texfile($path, "$fn (line $.)")
		if $macro eq 'input';
	}
	while(s/\\bibliography\{(.*?)\}//) {
	    my @bibs = split(/,\s*/, $1);
	    my $bbl = $fn;
	    $bbl =~ s/\.tex$/.bbl/;
	    print "$bbl: ", join(' ', map { "$_.bib" } @bibs), "\n\n";
	    push @dep, $bbl;
	}
    }
    close($f);
    return uniq(@dep);
}

my $matlab;
foreach my $fn (@ARGV) {
    if ($fn eq '-p') {
	# assume use of pdftex/pdflatex: set both the target suffix
	# and the \includegraphics default suffix to .pdf
	@tex_target_suffix = ('.pdf');
	$includegraphics_suffix = '.pdf';
    } elsif ($fn eq '-k') {
        warn("$0:option -k is now redundant\n");
    } elsif ($fn =~ /^-s(.*)$/i) {
	# add additional target suffixes
	push @tex_target_suffix, $1;
    } elsif ($fn =~ /^-d(.*)$/) {
	# add prefix directory
	$prefix = $1;
	$prefix .= '/' unless $prefix =~ /\/\z/;
    } elsif ($fn =~ /\.tex$/i) {
	my @dep = scan_texfile($fn, 'command line');
	@dep = map({ $prefix . $_ } @dep) if $prefix;
	$fn =~ s/\.tex$//i;
	print join(' ', map({ $prefix . $fn . $_ } @tex_target_suffix)) .
	    ": " . join(' ', @dep) . "\n\n" if @dep;
    } elsif ($fn =~ /\.m$/) {
	my $cmd = $`;
	my $prod;
	my $dep = $fn;
	my $f;
	open($f, "<$fn");
	while (<$f>) {
	    # handle continuation lines
	    while (s/\.\.\.\s*$//) {
		$_ .= <$f>;
	    }
	    if (/^\s*(imwrite|saveas)\(.*?'([\w\.%-]+)\'.*?(,\s*\'\w+\'\s*)?\);?\s*$/) {
		$prod .= ' ' if $prod;
		$prod .= $2;
	    }
            if (/^\s*load\s+([\w\.%-\@]+)\s*(;.*)?\s*$/) {
                $dep .= " $1"
            }
	}
        close($f);
	if ($prod && !$matlab) {
	    print "MATLAB=matlab -nosplash\n\n";
	    $matlab = 1;
	}
	print "$prod: $dep\n\techo $cmd | \$(MATLAB)\n\n" if $prod;
    } else {
	die("Unknown file type of '$fn'");
    }
}
